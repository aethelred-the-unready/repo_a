stages:
  # To check if $GITHUB_OAUTH_TOKEN is able to publish a GitHub release,
  # trigger a custom TravisCI build for this branch using the CUSTOM CONFIG:
  #
  #   env: VALIDATE_TRAVIS=yes
  #
  - name: validate_travis
    if: 'env(VALIDATE_TRAVIS) = yes'
  - name: check
    if: 'NOT env(VALIDATE_TRAVIS) = yes'
  - name: spec
    if: 'NOT env(VALIDATE_TRAVIS) = yes'
  - name: deploy
    if: 'tag IS present AND NOT env(VALIDATE_TRAVIS) = yes'

jobs:
  include:
  - stage: spec
    script:
    - 'echo "===== job script: OK"'
  - stage: check
    script:
    - 'echo "===== job script: OK"'
  - stage: deploy
    script:
    - 'echo "===== job script: OK"'
    deploy:
    - name: deploy (script, tags = true)
      provider: script
      script: 'echo "=====***** provider script: ok (tags = true)"'
      on:
        tags: true
    - provider: releases
      api_key: $GITHUB_OAUTH_TOKEN
      skip_cleanup: true
      on:
        tags: true
        condition: "($SKIP_FORGE_PUBLISH != true)"
  - stage: validate_travis
    name: validate GitHub OAuth token in TravisCI has sufficient scope to release
    script:
    - 'printf "\n===== GITHUB_OAUTH_TOKEN validation \
               \n(TRAVIS_SECURE_ENV_VARS=${TRAVIS_SECURE_ENV_VARS})\n\n";
      OWNER="$(echo $TRAVIS_REPO_SLUG | cut -d/ -f1)";
      curl -H "Authorization: token ${GITHUB_OAUTH_TOKEN}" "https://api.github.com/users/$OWNER"
      -I | grep ^X-OAuth-Scopes | egrep -w "repo|public_repo" '
